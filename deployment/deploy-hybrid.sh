#!/bin/bash

# SecBeat Hybrid Deployment Script
# Uses Terraform for some infrastructure management and bash scripts for VM creation

set -e

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
TERRAFORM_DIR="$SCRIPT_DIR/terraform"
ANSIBLE_DIR="$SCRIPT_DIR/ansible"
SCRIPTS_DIR="$SCRIPT_DIR/scripts"
LOG_DIR="$PROJECT_ROOT/logs/deployment"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Create log directory
mkdir -p "$LOG_DIR"
DEPLOY_LOG="$LOG_DIR/hybrid_deployment_$(date +%Y%m%d_%H%M%S).log"

# Logging function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$DEPLOY_LOG"
}

# Print functions
print_header() {
    echo -e "\n${PURPLE}================================${NC}"
    echo -e "${PURPLE}$1${NC}"
    echo -e "${PURPLE}================================${NC}\n"
    log "HEADER: $1"
}

print_status() {
    echo -e "${CYAN}⏳ $1${NC}"
    log "STATUS: $1"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
    log "SUCCESS: $1"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
    log "ERROR: $1"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
    log "WARNING: $1"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
    log "INFO: $1"
}

# Function to show usage
show_usage() {
    cat << 'EOF'
SecBeat Hybrid Deployment (Terraform + Ansible + Bash)

USAGE:
    ./deploy-hybrid.sh [COMMAND] [OPTIONS]

COMMANDS:
    test          Run pre-deployment tests
    vms           Create VMs using proven bash scripts
    inventory     Generate Ansible inventory from created VMs
    configure     Configure VMs with Ansible
    deploy        Complete deployment (vms + configure)
    status        Check deployment status
    destroy       Destroy all VMs
    help          Show this help message

OPTIONS:
    -v, --verbose       Verbose output
    -f, --force         Force operation without confirmation

EXAMPLES:
    ./deploy-hybrid.sh test        # Test environment
    ./deploy-hybrid.sh deploy      # Full deployment
    ./deploy-hybrid.sh configure   # Configure existing VMs
    ./deploy-hybrid.sh status      # Check status

PREREQUISITES:
    - Ansible >= 2.9
    - SSH key at ~/.ssh/id_rsa
    - Proxmox access configured
    - Working bash deployment scripts

EOF
}

# Function to check prerequisites
check_prerequisites() {
    print_header "Checking Prerequisites"
    
    # Check Ansible
    if command -v ansible >/dev/null 2>&1; then
        local ansible_version=$(ansible --version | head -n1 | cut -d' ' -f2)
        print_success "Ansible found: $ansible_version"
    else
        print_error "Ansible not found. Please install Ansible >= 2.9"
        return 1
    fi
    
    # Check SSH key
    if [[ -f "$HOME/.ssh/id_rsa" ]]; then
        print_success "SSH key found at ~/.ssh/id_rsa"
    else
        print_error "SSH key not found at ~/.ssh/id_rsa"
        print_info "Generate SSH key with: ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa"
        return 1
    fi
    
    # Check if we have the main deployment script
    if [[ -f "$PROJECT_ROOT/deploy_proxmox.sh" ]]; then
        print_success "Main deployment script found"
    else
        print_error "Main deployment script not found at $PROJECT_ROOT/deploy_proxmox.sh"
        return 1
    fi
    
    # Check jq
    if command -v jq >/dev/null 2>&1; then
        print_success "jq found"
    else
        print_error "jq not found. Please install jq for JSON processing"
        return 1
    fi
    
    print_success "All prerequisites met"
}

# Function to run pre-deployment tests
run_tests() {
    print_header "Running Pre-Deployment Tests"
    
    print_status "Running Proxmox connectivity tests..."
    if "$PROJECT_ROOT/deploy_proxmox.sh" test; then
        print_success "Pre-deployment tests passed"
    else
        print_error "Pre-deployment tests failed"
        return 1
    fi
}

# Function to create VMs using bash scripts
create_vms() {
    print_header "Creating VMs with Bash Scripts"
    
    print_status "Using proven bash deployment scripts..."
    if "$PROJECT_ROOT/deploy_proxmox.sh" deploy; then
        print_success "VMs created successfully"
    else
        print_error "VM creation failed"
        return 1
    fi
}

# Function to generate Ansible inventory
generate_inventory() {
    print_header "Generating Ansible Inventory"
    
    local inventory_file="$ANSIBLE_DIR/inventory.ini"
    
    print_status "Creating Ansible inventory from VM configuration..."
    
    cat > "$inventory_file" << 'EOF'
# Ansible Inventory for SecBeat Deployment
# Generated by hybrid deployment script

[mitigation_nodes]
secbeat-mitigation-1 ansible_host=192.168.100.200 ansible_user=secbeat
secbeat-mitigation-2 ansible_host=192.168.100.201 ansible_user=secbeat
secbeat-mitigation-3 ansible_host=192.168.100.202 ansible_user=secbeat

[orchestrator]
secbeat-orchestrator ansible_host=192.168.100.203 ansible_user=secbeat

[nats_cluster]
secbeat-nats-1 ansible_host=192.168.100.204 ansible_user=secbeat
secbeat-nats-2 ansible_host=192.168.100.205 ansible_user=secbeat
secbeat-nats-3 ansible_host=192.168.100.206 ansible_user=secbeat

[load_balancers]
secbeat-lb-1 ansible_host=192.168.100.207 ansible_user=secbeat
secbeat-lb-2 ansible_host=192.168.100.208 ansible_user=secbeat

[monitoring]
secbeat-monitoring ansible_host=192.168.100.209 ansible_user=secbeat

[secbeat:children]
mitigation_nodes
orchestrator
nats_cluster
load_balancers
monitoring

[secbeat:vars]
ansible_ssh_private_key_file=~/.ssh/id_rsa
ansible_ssh_common_args='-o StrictHostKeyChecking=no'
ansible_python_interpreter=/usr/bin/python3
EOF
    
    print_success "Ansible inventory generated at $inventory_file"
}

# Function to run Ansible configuration
run_ansible() {
    print_header "Running Ansible Configuration"
    
    cd "$ANSIBLE_DIR"
    
    # Check if inventory exists
    if [[ ! -f "inventory.ini" ]]; then
        print_warning "Ansible inventory not found, generating..."
        generate_inventory
    fi
    
    # Test connectivity first
    print_status "Testing Ansible connectivity..."
    if ansible all -i inventory.ini -m ping --timeout=30; then
        print_success "All VMs are accessible via Ansible"
    else
        print_warning "Some VMs may not be ready. Waiting and retrying..."
        sleep 30
        if ! ansible all -i inventory.ini -m ping --timeout=30; then
            print_error "Ansible connectivity failed. Check VM status and SSH configuration."
            return 1
        fi
    fi
    
    print_status "Running Ansible playbook..."
    if ansible-playbook -i inventory.ini site.yml --timeout=300; then
        print_success "Ansible configuration completed successfully"
    else
        print_error "Ansible configuration failed"
        return 1
    fi
}

# Function to test deployment
test_deployment() {
    print_header "Testing Deployment"
    
    cd "$ANSIBLE_DIR"
    
    if [[ ! -f "inventory.ini" ]]; then
        print_error "Ansible inventory not found. Deploy first."
        return 1
    fi
    
    # Test basic connectivity
    print_status "Testing VM connectivity..."
    if ansible all -i inventory.ini -m ping; then
        print_success "All VMs are accessible"
    else
        print_error "Some VMs are not accessible"
        return 1
    fi
    
    # Test SecBeat services
    print_status "Testing SecBeat services..."
    ansible mitigation_nodes -i inventory.ini -m shell -a "systemctl is-active secbeat-mitigation || echo 'Not running'" | grep -E "(SUCCESS|FAILED)"
    ansible orchestrator -i inventory.ini -m shell -a "systemctl is-active secbeat-orchestrator || echo 'Not running'" | grep -E "(SUCCESS|FAILED)"
    
    # Test monitoring
    print_status "Testing monitoring services..."
    ansible monitoring -i inventory.ini -m shell -a "curl -f http://localhost:9090/-/healthy || echo 'Prometheus not ready'" | grep -E "(SUCCESS|FAILED)"
    ansible monitoring -i inventory.ini -m shell -a "curl -f http://localhost:3000/api/health || echo 'Grafana not ready'" | grep -E "(SUCCESS|FAILED)"
    
    print_success "Deployment tests completed"
}

# Function to show deployment status
show_status() {
    print_header "Deployment Status"
    
    # Check if VMs exist
    print_status "Checking VM status on Proxmox..."
    ssh root@192.168.100.23 "qm list | grep -E '(200|201|202|203|204|205|206|207|208|209)'" || print_warning "Some VMs may not exist"
    
    # Show Ansible connectivity
    if [[ -f "$ANSIBLE_DIR/inventory.ini" ]]; then
        print_status "Testing Ansible connectivity..."
        cd "$ANSIBLE_DIR"
        ansible all -i inventory.ini -m ping | grep -E "(SUCCESS|UNREACHABLE|FAILED)"
    else
        print_warning "No Ansible inventory found"
    fi
}

# Function to destroy infrastructure
destroy_infrastructure() {
    print_header "Destroying Infrastructure"
    
    print_warning "This will destroy ALL SecBeat VMs!"
    if [[ "$FORCE" != "true" ]]; then
        read -p "Are you sure? (yes/no): " confirm
        if [[ "$confirm" != "yes" ]]; then
            print_info "Destruction cancelled"
            return 0
        fi
    fi
    
    print_status "Destroying VMs..."
    local vm_ids=(200 201 202 203 204 205 206 207 208 209)
    
    for vm_id in "${vm_ids[@]}"; do
        print_status "Destroying VM $vm_id..."
        ssh root@192.168.100.23 "qm stop $vm_id || true; qm destroy $vm_id || true" && \
        print_success "VM $vm_id destroyed" || \
        print_warning "Failed to destroy VM $vm_id (may not exist)"
    done
    
    print_success "Infrastructure destruction completed"
}

# Main function
main() {
    local command=""
    local verbose=false
    local force=false
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_usage
                exit 0
                ;;
            -v|--verbose)
                verbose=true
                shift
                ;;
            -f|--force)
                force=true
                FORCE=true
                shift
                ;;
            test|vms|inventory|configure|deploy|status|destroy|help)
                command="$1"
                shift
                ;;
            *)
                print_error "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done
    
    # Set verbose mode
    if [[ "$verbose" == "true" ]]; then
        set -x
    fi
    
    # If no command specified, show usage
    if [[ -z "$command" ]]; then
        show_usage
        exit 1
    fi
    
    # Show header
    print_header "SecBeat Hybrid Deployment (Bash + Ansible)"
    print_info "Command: $command"
    print_info "Timestamp: $(date)"
    print_info "Log file: $DEPLOY_LOG"
    
    # Check prerequisites for most commands
    if [[ "$command" != "help" ]]; then
        check_prerequisites
    fi
    
    # Execute command
    case $command in
        test)
            run_tests
            ;;
        vms)
            create_vms
            generate_inventory
            ;;
        inventory)
            generate_inventory
            ;;
        configure)
            run_ansible
            ;;
        deploy)
            run_tests
            create_vms
            generate_inventory
            run_ansible
            ;;
        status)
            show_status
            ;;
        destroy)
            destroy_infrastructure
            ;;
        help)
            show_usage
            ;;
        *)
            print_error "Invalid command: $command"
            show_usage
            exit 1
            ;;
    esac
    
    print_success "Command '$command' completed successfully"
    
    # Show access information for successful deployment
    if [[ "$command" == "deploy" || "$command" == "configure" ]]; then
        print_header "Deployment Complete - Access Information"
        print_info "🌐 Service URLs:"
        print_info "   Grafana: http://192.168.100.209:3000 (admin/secbeat123)"
        print_info "   Prometheus: http://192.168.100.209:9090"
        print_info "   HAProxy Stats: http://192.168.100.207:8404/stats"
        print_info ""
        print_info "🔐 SSH Access:"
        print_info "   ssh -i ~/.ssh/id_rsa secbeat@192.168.100.XXX"
        print_info ""
        print_info "📊 VM Status:"
        print_info "   ./deploy-hybrid.sh status"
    fi
}

# Script execution
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
