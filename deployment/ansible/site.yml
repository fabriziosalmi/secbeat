---
# SecBeat Infrastructure Deployment Playbook
- name: Deploy SecBeat Infrastructure
  hosts: all
  become: yes
  gather_facts: yes
  
  vars:
    secbeat_user: secbeat
    secbeat_home: /opt/secbeat
    rust_version: stable

  tasks:
    - name: Update system packages
      apt:
        update_cache: yes
        upgrade: dist
        cache_valid_time: 3600

    - name: Install base packages
      apt:
        name:
          - curl
          - wget
          - git
          - htop
          - net-tools
          - ufw
          - fail2ban
          - unzip
          - jq
          - build-essential
          - pkg-config
          - libssl-dev
          - ca-certificates
          - gnupg
          - lsb-release
          - rsyslog
          - chrony
        state: present

    - name: Create secbeat directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ secbeat_user }}"
        group: "{{ secbeat_user }}"
        mode: '0755'
      loop:
        - "{{ secbeat_home }}"
        - "{{ secbeat_home }}/config"
        - "{{ secbeat_home }}/logs"
        - "{{ secbeat_home }}/data"
        - "{{ secbeat_home }}/certs"

    - name: Configure firewall base rules
      ufw:
        rule: allow
        port: ssh
        state: enabled

    - name: Configure fail2ban
      systemd:
        name: fail2ban
        enabled: yes
        state: started

    - name: Synchronize time
      systemd:
        name: chrony
        enabled: yes
        state: started

    - name: Set timezone
      timezone:
        name: UTC

# Deploy SecBeat source code to relevant nodes
- name: Deploy SecBeat Source Code
  hosts: mitigation_nodes:orchestrator
  become: yes
  vars:
    secbeat_user: secbeat
    secbeat_home: /opt/secbeat

  tasks:
    - name: Install Rust
      become_user: "{{ secbeat_user }}"
      shell: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable --profile minimal
        source ~/.cargo/env
      args:
        creates: "/home/{{ secbeat_user }}/.cargo/bin/rustc"

    - name: Create deployment archive locally
      local_action: 
        module: archive
        path: "{{ playbook_dir }}/../../"
        dest: "/tmp/secbeat-deployment.tar.gz"
        exclude_path:
          - "target"
          - ".git"
          - "logs"
          - "deployment/terraform/.terraform"
          - "deployment/terraform/terraform.tfstate*"
      run_once: true

    - name: Copy SecBeat source code
      unarchive:
        src: "/tmp/secbeat-deployment.tar.gz"
        dest: "{{ secbeat_home }}"
        owner: "{{ secbeat_user }}"
        group: "{{ secbeat_user }}"
        mode: '0755'

    - name: Build SecBeat
      become_user: "{{ secbeat_user }}"
      shell: |
        source ~/.cargo/env
        cd {{ secbeat_home }}
        cargo build --release
      args:
        chdir: "{{ secbeat_home }}"
        creates: "{{ secbeat_home }}/target/release/mitigation-node"

# Mitigation nodes specific configuration
- name: Configure Mitigation Nodes
  hosts: mitigation_nodes
  become: yes
  vars:
    secbeat_user: secbeat
    secbeat_home: /opt/secbeat

  tasks:
    - name: Allow mitigation ports
      ufw:
        rule: allow
        port: "{{ item }}"
      loop:
        - "8443"  # HTTPS traffic
        - "9192"  # Health check

    - name: Create mitigation node systemd service
      template:
        src: mitigation-node.service.j2
        dest: /etc/systemd/system/secbeat-mitigation.service
        mode: '0644'
      notify: restart mitigation service

    - name: Enable mitigation service
      systemd:
        name: secbeat-mitigation
        enabled: yes
        daemon_reload: yes

  handlers:
    - name: restart mitigation service
      systemd:
        name: secbeat-mitigation
        state: restarted

# Orchestrator configuration
- name: Configure Orchestrator
  hosts: orchestrator
  become: yes
  vars:
    secbeat_user: secbeat
    secbeat_home: /opt/secbeat

  tasks:
    - name: Allow orchestrator ports
      ufw:
        rule: allow
        port: "{{ item }}"
      loop:
        - "9090"  # Orchestrator API
        - "9191"  # Metrics

    - name: Create orchestrator systemd service
      template:
        src: orchestrator.service.j2
        dest: /etc/systemd/system/secbeat-orchestrator.service
        mode: '0644'
      notify: restart orchestrator service

    - name: Enable orchestrator service
      systemd:
        name: secbeat-orchestrator
        enabled: yes
        daemon_reload: yes

  handlers:
    - name: restart orchestrator service
      systemd:
        name: secbeat-orchestrator
        state: restarted

# NATS cluster configuration
- name: Configure NATS Cluster
  hosts: nats_cluster
  become: yes
  
  tasks:
    - name: Download and install NATS server
      get_url:
        url: https://github.com/nats-io/nats-server/releases/download/v2.10.0/nats-server-v2.10.0-linux-amd64.tar.gz
        dest: /tmp/nats-server.tar.gz

    - name: Extract NATS server
      unarchive:
        src: /tmp/nats-server.tar.gz
        dest: /tmp
        remote_src: yes

    - name: Install NATS server binary
      copy:
        src: /tmp/nats-server-v2.10.0-linux-amd64/nats-server
        dest: /usr/local/bin/nats-server
        mode: '0755'
        remote_src: yes

    - name: Create NATS user
      user:
        name: nats
        system: yes
        shell: /bin/false
        home: /var/lib/nats
        create_home: yes

    - name: Create NATS directories
      file:
        path: "{{ item }}"
        state: directory
        owner: nats
        group: nats
        mode: '0755'
      loop:
        - /etc/nats
        - /var/log/nats

    - name: Generate NATS cluster configuration
      template:
        src: nats.conf.j2
        dest: /etc/nats/nats.conf
        owner: nats
        group: nats
        mode: '0644'
      notify: restart nats service

    - name: Create NATS systemd service
      template:
        src: nats.service.j2
        dest: /etc/systemd/system/nats.service
        mode: '0644'
      notify: restart nats service

    - name: Allow NATS ports
      ufw:
        rule: allow
        port: "{{ item }}"
      loop:
        - "4222"  # NATS client
        - "6222"  # NATS cluster
        - "8222"  # NATS monitoring

    - name: Enable NATS service
      systemd:
        name: nats
        enabled: yes
        daemon_reload: yes

  handlers:
    - name: restart nats service
      systemd:
        name: nats
        state: restarted

# Load balancer configuration
- name: Configure Load Balancers
  hosts: load_balancers
  become: yes

  tasks:
    - name: Install HAProxy and Nginx
      apt:
        name:
          - haproxy
          - nginx
        state: present

    - name: Generate HAProxy configuration
      template:
        src: haproxy.cfg.j2
        dest: /etc/haproxy/haproxy.cfg
        mode: '0644'
      notify: restart haproxy

    - name: Generate Nginx configuration
      template:
        src: nginx.conf.j2
        dest: /etc/nginx/sites-available/secbeat
        mode: '0644'
      notify: restart nginx

    - name: Enable Nginx site
      file:
        src: /etc/nginx/sites-available/secbeat
        dest: /etc/nginx/sites-enabled/secbeat
        state: link
      notify: restart nginx

    - name: Remove default Nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: restart nginx

    - name: Enable load balancer services
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
      loop:
        - haproxy
        - nginx

    - name: Allow load balancer ports
      ufw:
        rule: allow
        port: "{{ item }}"
      loop:
        - "80"    # HTTP
        - "443"   # HTTPS
        - "8404"  # HAProxy stats

  handlers:
    - name: restart haproxy
      systemd:
        name: haproxy
        state: restarted
    
    - name: restart nginx
      systemd:
        name: nginx
        state: restarted

# Monitoring configuration
- name: Configure Monitoring
  hosts: monitoring
  become: yes

  tasks:
    - name: Install Docker
      shell: curl -fsSL https://get.docker.com | sh
      args:
        creates: /usr/bin/docker

    - name: Add secbeat user to docker group
      user:
        name: secbeat
        groups: docker
        append: yes

    - name: Install Docker Compose
      get_url:
        url: "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-Linux-x86_64"
        dest: /usr/local/bin/docker-compose
        mode: '0755'

    - name: Create monitoring directories
      file:
        path: "{{ item }}"
        state: directory
        owner: secbeat
        group: secbeat
        mode: '0755'
      loop:
        - /opt/monitoring
        - /opt/monitoring/prometheus
        - /opt/monitoring/grafana

    - name: Generate monitoring docker-compose file
      template:
        src: docker-compose.yml.j2
        dest: /opt/monitoring/docker-compose.yml
        owner: secbeat
        group: secbeat
        mode: '0644'

    - name: Generate Prometheus configuration
      template:
        src: prometheus.yml.j2
        dest: /opt/monitoring/prometheus/prometheus.yml
        owner: secbeat
        group: secbeat
        mode: '0644'

    - name: Start monitoring stack
      docker_compose:
        project_src: /opt/monitoring
        state: present
      become_user: secbeat

    - name: Allow monitoring ports
      ufw:
        rule: allow
        port: "{{ item }}"
      loop:
        - "3000"  # Grafana
        - "9090"  # Prometheus
        creates: "/home/{{ secbeat_user }}/.cargo/bin/rustc"

# NATS cluster configuration
- name: Configure NATS Cluster
  hosts: nats_cluster
  become: yes
  
  tasks:
    - name: Download and install NATS server
      get_url:
        url: https://github.com/nats-io/nats-server/releases/download/v2.10.0/nats-server-v2.10.0-linux-amd64.tar.gz
        dest: /tmp/nats-server.tar.gz

    - name: Extract NATS server
      unarchive:
        src: /tmp/nats-server.tar.gz
        dest: /tmp
        remote_src: yes

    - name: Install NATS server binary
      copy:
        src: /tmp/nats-server-v2.10.0-linux-amd64/nats-server
        dest: /usr/local/bin/nats-server
        mode: '0755'
        remote_src: yes

    - name: Create NATS user
      user:
        name: nats
        system: yes
        shell: /bin/false
        home: /var/lib/nats
        create_home: yes

    - name: Create NATS directories
      file:
        path: "{{ item }}"
        state: directory
        owner: nats
        group: nats
        mode: '0755'
      loop:
        - /etc/nats
        - /var/log/nats

    - name: Allow NATS ports
      ufw:
        rule: allow
        port: "{{ item }}"
      loop:
        - "4222"  # NATS client
        - "6222"  # NATS cluster
        - "8222"  # NATS monitoring

# Load balancer configuration
- name: Configure Load Balancers
  hosts: load_balancers
  become: yes

  tasks:
    - name: Install HAProxy and Nginx
      apt:
        name:
          - haproxy
          - nginx
        state: present

    - name: Enable load balancer services
      systemd:
        name: "{{ item }}"
        enabled: yes
      loop:
        - haproxy
        - nginx

    - name: Allow load balancer ports
      ufw:
        rule: allow
        port: "{{ item }}"
      loop:
        - "80"    # HTTP
        - "443"   # HTTPS
        - "8404"  # HAProxy stats

# Monitoring configuration
- name: Configure Monitoring
  hosts: monitoring
  become: yes

  tasks:
    - name: Install Docker
      shell: curl -fsSL https://get.docker.com | sh
      args:
        creates: /usr/bin/docker

    - name: Add secbeat user to docker group
      user:
        name: secbeat
        groups: docker
        append: yes

    - name: Install Docker Compose
      get_url:
        url: "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-Linux-x86_64"
        dest: /usr/local/bin/docker-compose
        mode: '0755'

    - name: Create monitoring directories
      file:
        path: "{{ item }}"
        state: directory
        owner: secbeat
        group: secbeat
        mode: '0755'
      loop:
        - /opt/monitoring
        - /opt/monitoring/prometheus
        - /opt/monitoring/grafana

    - name: Allow monitoring ports
      ufw:
        rule: allow
        port: "{{ item }}"
      loop:
        - "3000"  # Grafana
        - "9090"  # Prometheus
